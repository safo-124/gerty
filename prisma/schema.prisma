// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  STUDENT
  TRAINER
  ADMIN
}

enum TournamentStatus {
  UPCOMING
  ONGOING
  COMPLETED
  CANCELLED
}

enum TournamentMode {
  IN_PERSON
  ONLINE
}

enum LessonStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
}

enum TrainingRequestStatus {
  PENDING_PAYMENT
  PENDING_TRAINER_CONFIRMATION
  SCHEDULED
  COMPLETED
  DECLINED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum OrderStatus {
  PENDING
  PAID
  CANCELLED
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  password      String
  name          String
  role          UserRole
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Trainer specific fields
  trainerProfile TrainerProfile?
  
  // Student specific fields
  studentProfile StudentProfile?
  
  // Relations
  enrolledTournaments TournamentParticipant[]
  lessonsAsStudent    Lesson[] @relation("StudentLessons")
  lessonsAsTrainer    Lesson[] @relation("TrainerLessons")
  trainingRequestsAsStudent TrainingRequest[] @relation("StudentTrainingRequests")
  trainingRequestsAsTrainer TrainingRequest[] @relation("TrainerTrainingRequests")
  notificationPreference NotificationPreference?
  donations Donation[]

  // Store relations
  orders   Order[]

  // Online games relations
  gamesAsWhite Game[] @relation("WhitePlayer")
  gamesAsBlack Game[] @relation("BlackPlayer")

  // Organized tournaments (as ADMIN)
  organizedTournaments Tournament[] @relation("OrganizerUser")
}

model TrainerProfile {
  id              String   @id @default(cuid())
  userId          String   @unique
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  title           String?  // e.g., "International Master", "FIDE Master"
  bio             String?  @db.Text
  specialties     String[] // e.g., ["Openings", "Endgames", "Tactics"]
  experience      Int?     // years of experience
  rating          Int?     // Chess rating (ELO)
  hourlyRate      Float?   // Price per hour
  availability    String?  @db.Text // JSON or text describing availability
  approved        Boolean  @default(false)
  
  // Advertisement info
  featured        Boolean  @default(false)
  profileImage    String?
  coverImage      String?
  videoUrl        String?
  
  // Stats
  totalStudents   Int      @default(0)
  totalLessons    Int      @default(0)
  averageRating   Float?   @default(0)
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  reviews         Review[]
}

model StudentProfile {
  id              String   @id @default(cuid())
  userId          String   @unique
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  currentRating   Int?
  targetRating    Int?
  preferredStyle  String?  // e.g., "Aggressive", "Positional"
  goals           String?  @db.Text
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Tournament {
  id              String   @id @default(cuid())
  name            String
  description     String   @db.Text
  organizerId     String
  organizer       User     @relation("OrganizerUser", fields: [organizerId], references: [id])
  
  startDate       DateTime
  endDate         DateTime
  registrationEnd DateTime
  
  maxParticipants Int?
  entryFee        Float?   @default(0)
  registrationFree Boolean @default(false)
  prizePool       Float?
  
  format          String   // e.g., "Swiss", "Round Robin", "Knockout"
  timeControl     String   // e.g., "Rapid", "Blitz", "Classical"
  mode            TournamentMode @default(IN_PERSON)
  status          TournamentStatus @default(UPCOMING)
  
  image           String?
  rules           String?  @db.Text
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  participants    TournamentParticipant[]
  games           Game[]
}

model TournamentParticipant {
  id            String   @id @default(cuid())
  tournamentId  String
  tournament    Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  registeredAt  DateTime @default(now())
  score         Float?   @default(0)
  rank          Int?
  
  @@unique([tournamentId, userId])
}

model Lesson {
  id          String   @id @default(cuid())
  studentId   String
  student     User     @relation("StudentLessons", fields: [studentId], references: [id], onDelete: Cascade)
  trainerId   String
  trainer     User     @relation("TrainerLessons", fields: [trainerId], references: [id], onDelete: Cascade)
  
  title       String
  description String?  @db.Text
  scheduledAt DateTime
  duration    Int      // in minutes
  status      LessonStatus @default(SCHEDULED)
  
  meetingLink String?
  notes       String?  @db.Text
  trainingRequestId String? @unique
  trainingRequest   TrainingRequest? @relation("RequestLesson", fields: [trainingRequestId], references: [id], onDelete: SetNull)
  reminderSentAt    DateTime?
  reminderLastAttemptAt DateTime?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model TrainingRequest {
  id                 String                 @id @default(cuid())
  studentId          String
  student            User                   @relation("StudentTrainingRequests", fields: [studentId], references: [id], onDelete: Cascade)
  trainerId          String
  trainer            User                   @relation("TrainerTrainingRequests", fields: [trainerId], references: [id], onDelete: Cascade)
  status             TrainingRequestStatus  @default(PENDING_PAYMENT)
  paymentStatus      PaymentStatus          @default(PENDING)
  amount             Float
  currency           String                 @default("USD")
  preferredSchedule  DateTime?
  duration           Int?
  focusAreas         String?                @db.Text
  message            String?                @db.Text
  paymentReference   String?
  paidAt             DateTime?
  lesson             Lesson?                @relation("RequestLesson")
  createdAt          DateTime               @default(now())
  updatedAt          DateTime               @updatedAt
}

model Review {
  id          String   @id @default(cuid())
  trainerId   String
  trainer     TrainerProfile @relation(fields: [trainerId], references: [id], onDelete: Cascade)
  
  reviewerName  String
  reviewerEmail String
  rating        Int    // 1-5 stars
  comment       String @db.Text
  
  createdAt   DateTime @default(now())
  
  @@index([trainerId])
}

model Donation {
  id        String   @id @default(cuid())
  userId    String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  causeId   String?
  cause     Cause?   @relation(fields: [causeId], references: [id], onDelete: SetNull)
  name      String
  email     String?
  amount    Float
  currency  String   @default("USD")
  message   String?  @db.Text
  createdAt DateTime @default(now())

  @@index([createdAt])
  @@index([causeId])
}

model Cause {
  id          String   @id @default(cuid())
  title       String
  description String?  @db.Text
  goalAmount  Float?
  image       String?
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  donations   Donation[]
}

model Product {
  id          String         @id @default(cuid())
  name        String
  description String?        @db.Text
  price       Float
  currency    String         @default("USD")
  stock       Int            @default(0)
  active      Boolean        @default(true)
  deletedAt   DateTime?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  images      ProductImage[]
  orderItems  OrderItem[]
}

model ProductImage {
  id        String   @id @default(cuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  url       String
  width     Int?
  height    Int?
  createdAt DateTime @default(now())

  @@index([productId])
}

model Order {
  id        String      @id @default(cuid())
  userId    String?
  user      User?       @relation(fields: [userId], references: [id], onDelete: SetNull)
  email     String
  total     Float       @default(0)
  currency  String      @default("USD")
  status    OrderStatus @default(PENDING)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  items     OrderItem[]
}

model OrderItem {
  id         String  @id @default(cuid())
  orderId    String
  order      Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId  String
  product    Product @relation(fields: [productId], references: [id], onDelete: Restrict)
  quantity   Int
  unitPrice  Float
  currency   String   @default("USD")

  @@index([orderId])
  @@index([productId])
}

enum GameStatus {
  ONGOING
  CHECKMATE
  DRAW
  RESIGNATION
  TIMEOUT
}

model Game {
  id            String     @id @default(cuid())
  tournamentId  String
  tournament    Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  round         Int?
  whiteUserId   String
  blackUserId   String
  white         User       @relation("WhitePlayer", fields: [whiteUserId], references: [id], onDelete: Cascade)
  black         User       @relation("BlackPlayer", fields: [blackUserId], references: [id], onDelete: Cascade)
  fen           String     @default("rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1")
  pgn           String?    @db.Text
  status        GameStatus @default(ONGOING)
  result        String?    // "1-0", "0-1", "1/2-1/2"
  turn          String     @default("w") // "w" or "b"
  lastMoveAt    DateTime   @default(now())
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  @@index([tournamentId])
  @@index([whiteUserId])
  @@index([blackUserId])
}

model NotificationPreference {
  id                     String @id @default(cuid())
  userId                 String @unique
  user                   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  lessonRemindersEnabled Boolean @default(true)
  tournamentRemindersEnabled Boolean @default(true)
  reminderOffsetMinutes  Int     @default(60)
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
}

/// Anonymous live matches (no login required)
model LiveMatch {
  id         String     @id @default(cuid())
  title      String?
  fen        String     @default("rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1")
  pgn        String?    @db.Text
  status     GameStatus @default(ONGOING)
  result     String?
  turn       String     @default("w")
  whiteToken String     @unique
  blackToken String     @unique
  drawOffer  String?
  opponentType OpponentType @default(HUMAN)
  aiLevel      Int?
  humanSide    Side?
  lastMoveAt DateTime   @default(now())
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  @@index([status])
  @@index([createdAt])
}

enum OpponentType {
  HUMAN
  AI
}

enum Side {
  WHITE
  BLACK
}
